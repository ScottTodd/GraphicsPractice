#version 330 core

struct Light {
    vec3 position;
    vec3 color;
    float power;
};

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform Light light;

layout(location = 0) in vec3 position; // modelspace
layout(location = 1) in vec3 normal; // modelspace

out vec3 position_worldspace;
out vec3 normal_cameraspace;
out vec3 eye_direction_cameraspace;
out vec3 light_direction_cameraspace;

void main() {
    mat4 mvp = projection * view * model;

	gl_Position = mvp * vec4(position, 1); // Screenspace vertex position.

    position_worldspace = (model * vec4(position, 1)).xyz;

    normal_cameraspace = normalize((view * model * vec4(normal, 0)).xyz);

    vec3 position_cameraspace = (view * model * vec4(position, 1)).xyz;
    eye_direction_cameraspace = normalize(vec3(0,0,0) - position_cameraspace);

    vec3 light_position_cameraspace = (view * vec4(light.position, 1)).xyz;
    light_direction_cameraspace = normalize(light_position_cameraspace +
                                            eye_direction_cameraspace);
}
