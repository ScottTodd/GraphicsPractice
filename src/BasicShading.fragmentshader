#version 330 core

struct Light {
    vec3 position;
    vec3 color;
    float power;
};

uniform Light light;

in vec3 position_worldspace;
in vec3 normal_cameraspace;
in vec3 eye_direction_cameraspace;
in vec3 light_direction_cameraspace;

out vec3 color;

void main() {
    float distance_to_light = length(light.position - position_worldspace);

    // Cosine of angle.
    float normal_to_light = clamp(dot(normal_cameraspace,
                                      light_direction_cameraspace),
                                  0, 1);

    // Cosine of angle.
    float eye_to_reflect = clamp(dot(eye_direction_cameraspace,
                                     reflect(-light_direction_cameraspace,
                                             normal_cameraspace)),
                                 0, 1);

    vec3 ambient = vec3(0.1, 0.1, 0.1);
    vec3 diffuse = light.color * light.power * normal_to_light /
                   (distance_to_light * distance_to_light);
    vec3 specular = light.color * light.power * pow(eye_to_reflect, 5) /
                   (distance_to_light * distance_to_light);
    color = ambient + diffuse + specular;
}
